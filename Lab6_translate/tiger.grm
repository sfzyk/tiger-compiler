%{
#include <stdio.h>
#include "util.h"
#include "symbol.h"
#include "errormsg.h"
#include "absyn.h"


int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union{
	int pos;
	int ival;
	string sval;
  	A_var var;
	A_exp exp;
	A_efieldList efieldList;
	A_efield efield;
	A_ty ty;
	A_namety namety;
	A_nametyList nametyList;
	A_fundec fundec;
	A_fundecList fundecList;

	A_decList decList;
	A_expList  expList;

	A_field field;
	A_fieldList fieldList;

	A_dec dec;



      }

%token <sval> ID STRING
%token <ival> INT
%type <efieldList> vfields vfields_
%type <efield>  vfield
%type <var>  lvalue
%type <ty>   ty
%type <namety> namety
%type <nametyList> nametylist

%type <decList> decs
%type <expList> expseq fvfields fvfields_
%type <field>      tyfield
%type <fieldList>  tyfields_  tyfields

%type <dec> dec vardec fundec tydec

%type <fundec>   afundec
%type <fundecList> fundecList

%token
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
  LBRACE RBRACE DOT
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
  BREAK NIL
  FUNCTION VAR TYPE
  UMINUS

%type <exp> exp program
%start program

%left OR
%left AND
%nonassoc EQ NEQ LT GT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%right ELSE THEN



%%

program:   exp    {absyn_root=$1 ;}
	   ;


exp:    exp PLUS exp       {$$=A_OpExp(EM_tokPos,A_plusOp, $1,$3 ); }
   |    exp MINUS exp      {$$=A_OpExp(EM_tokPos,A_minusOp,$1,$3 ) ; }
   |    exp TIMES exp      {$$=A_OpExp(EM_tokPos,A_timesOp,$1,$3 ) ; }
   |    exp DIVIDE exp     {$$=A_OpExp(EM_tokPos,A_divideOp,$1,$3) ; }
   |    exp EQ exp         {$$=A_OpExp(EM_tokPos,A_eqOp,$1,$3);      }
   |    exp NEQ exp        {$$=A_OpExp(EM_tokPos,A_neqOp,$1,$3);     }
   |    exp LT exp         {$$=A_OpExp(EM_tokPos,A_ltOp, $1,$3);     }
   |    exp LE exp         {$$=A_OpExp(EM_tokPos,A_leOp, $1 ,$3);    }
   |    exp GT exp         {$$=A_OpExp(EM_tokPos,A_gtOp, $1 ,$3);    }
   |    exp GE exp         {$$=A_OpExp(EM_tokPos,A_geOp, $1 ,$3);    }
   |    exp AND exp        {$$=A_IfExp(EM_tokPos,$1,$3,A_IntExp(EM_tokPos,0));}
   |    exp OR exp		   {$$=A_IfExp(EM_tokPos,$1,A_IntExp(EM_tokPos,1),$3);}
   |    MINUS exp   %prec UMINUS  {$$=A_OpExp(EM_tokPos,A_minusOp,A_IntExp(EM_tokPos,0), $2);}

   |    lvalue ASSIGN exp           {$$=A_AssignExp(EM_tokPos,$1,$3);}
   |    LPAREN expseq RPAREN 	    {$$=A_SeqExp(EM_tokPos,$2);}
   |    LET decs IN expseq END      {$$=A_LetExp(EM_tokPos,$2,A_SeqExp(EM_tokPos,$4));}
   |    ID LBRACK exp RBRACK OF exp {$$=A_ArrayExp(EM_tokPos,S_Symbol($1),$3,$6); }

   |    ID LBRACE vfields RBRACE    {$$=A_RecordExp(EM_tokPos,S_Symbol($1),$3);}

   |    ID LPAREN fvfields RPAREN   {$$=A_CallExp(EM_tokPos,S_Symbol($1),$3);}
   |    lvalue                      {$$=A_VarExp(EM_tokPos,$1);}

   |    IF exp THEN exp		        {$$=A_IfExp(EM_tokPos,$2,$4,A_NilExp(EM_tokPos)); }
   |    IF exp THEN exp ELSE exp    {$$=A_IfExp(EM_tokPos,$2,$4,$6);                  }
   |    WHILE exp DO exp            {$$=A_WhileExp(EM_tokPos,$2,$4); }
   |    FOR ID ASSIGN exp TO exp DO exp  {$$=A_ForExp(EM_tokPos,S_Symbol($2),$4,$6,$8); }

   |    BREAK  		  {$$=A_BreakExp(EM_tokPos);  }
   |    INT			  {$$=A_IntExp(EM_tokPos,$1); }
   |    STRING 	      {$$=A_StringExp(EM_tokPos,$1);}
   |    NIL			  {$$=A_NilExp(EM_tokPos);    }
   ;

vfields:  vfield vfields_          {$$=A_EfieldList($1,$2);}
       |  vfield 		           {$$=A_EfieldList($1,NULL);}
       |         		           {$$=NULL;}
       ;

vfields_: COMMA vfield vfields_	            {$$=A_EfieldList($2,$3);}
		| COMMA vfield  	                {$$=A_EfieldList($2,NULL);}
        ;

vfield : ID EQ exp          {$$=A_Efield(S_Symbol($1),$3);}
       ;



fvfields: exp fvfields_  {$$=A_ExpList($1,$2); }
	| exp		 {$$=A_ExpList($1,NULL);}
        |  		 {$$=NULL;}
        ;

fvfields_: COMMA exp fvfields_ {$$=A_ExpList($2,$3);}
         | COMMA exp		       {$$=A_ExpList($2,NULL);}
         ;


lvalue : ID 			          {$$=A_SimpleVar(EM_tokPos,S_Symbol($1)); }
       | lvalue DOT ID            {$$=A_FieldVar(EM_tokPos,$1,S_Symbol($3)); }
       | lvalue LBRACK exp RBRACK {$$=A_SubscriptVar(EM_tokPos,$1,$3);     }
       | ID LBRACK exp RBRACK     {$$=A_SubscriptVar(EM_tokPos,A_SimpleVar(EM_tokPos,S_Symbol($1)),$3);}
       ;

expseq : exp			 {$$=A_ExpList($1,NULL);}
       | exp SEMICOLON expseq 	 {$$=A_ExpList($1,$3);}
       |		         {$$=NULL;}
       ;

decs:  dec			     {$$=A_DecList($1,NULL);}
    |  dec decs			 {$$=A_DecList($1,$2);  }
    ;

dec : vardec 			 {$$=$1;}
    | fundec 		     {$$=$1;}
    | tydec 		  	 {$$=$1;}
    ;

vardec: VAR ID COLON ID ASSIGN exp {$$=A_VarDec(EM_tokPos,S_Symbol($2),S_Symbol($4),$6);}
      |  VAR ID ASSIGN exp 	       {$$=A_VarDec(EM_tokPos,S_Symbol($2),NULL,$4);        }

fundec:         fundecList         {$$=A_FunctionDec(EM_tokPos,$1);     }
      ;

fundecList:     afundec fundecList {$$=A_FundecList($1,$2);   }
 	  |	        afundec 	       {$$=A_FundecList($1,NULL); }
	  ;



afundec:  FUNCTION ID LPAREN tyfields RPAREN EQ exp            {$$=A_Fundec(EM_tokPos,S_Symbol($2),$4,NULL,$7);}
       |  FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp   {$$=A_Fundec(EM_tokPos,S_Symbol($2),$4,S_Symbol($7),$9);}
       ;

tydec : nametylist                {$$=A_TypeDec(EM_tokPos,$1);}
      ;
nametylist :  namety nametylist   {$$=A_NametyList($1,$2);  }
	   |  namety 		  {$$=A_NametyList($1,NULL);}
	   ;
namety    : TYPE ID EQ ty         {$$=A_Namety(S_Symbol($2),$4); }
	  ;

ty    : ID			  {$$=A_NameTy(EM_tokPos,S_Symbol($1));}
      | LBRACE tyfields RBRACE    {$$=A_RecordTy(EM_tokPos,$2);}
      | ARRAY OF ID 	    	  {$$=A_ArrayTy(EM_tokPos,S_Symbol($3));}
      ;


tyfields : tyfield                 {$$=A_FieldList($1,NULL);}
         | tyfield COMMA tyfields_ {$$=A_FieldList($1,$3);  }
	     | 			               {$$=NULL;                }
         ;

tyfields_ : tyfield                 {$$=A_FieldList($1,NULL);}
          | tyfield COMMA tyfields_ {$$=A_FieldList($1,$3);}
   	  ;



tyfield : ID COLON ID               {$$=A_Field(EM_tokPos,S_Symbol($1),S_Symbol($3));}
	;

















